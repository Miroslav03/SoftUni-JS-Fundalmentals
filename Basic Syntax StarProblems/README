9. Login 
You will be given a string representing a username. The correct password will be that username reversed. Until you receive the correct password print on the console: "Incorrect password. Try again.". When you receive the correct password print: "User {username} logged in." 
However, on the fourth try if the password is still not correct print: "User {username} blocked!" and end the program. 
The input comes as an array of strings - the first string represents username and each subsequent string is a password.



10. The Pyramid of King Djoser
Write a JS program that calculates how much resources will be required for the construction of a pyramid. It is made out of stone, marble, lapis lazuli, and gold. Your program will receive an integer that will be the base width and length of the pyramid and an increment that is the height of each step. The bulk is made out of stone, while the outer layer is made out of marble. Every fifth step’s outer layer is made out of lapis lazuli instead of marble. The final step is made out of gold.
The pyramid is built with 1x1 blocks with a height equal to the given increment. The first step of the pyramid has a width and length equal to the given base and every next step is reduced by 2 blocks (1 from each side). The height of every step equals the given increment. See the drawing for an example. White steps are covered in marble, blue steps are covered in lapis lazuli (every fifth layer from the bottom), and yellow steps are made entirely out of gold (top-most step).
 
Since the outer layer of each step is made of decorative material, to calculate the required stone for one step, reduce the width and length by 2 blocks (one from each side), find its area, and multiply it by the increment. The rest of the step is made out of lapis lazuli for every fifth step from the bottom and marble for all other steps. To find the amount needed, you may, for example, find its perimeter and reduce it by 4 (to compensate for the overlapping corners), and multiply the result by the increment. See the drawing for details (grey is stone, white is decoration).
 	 	 
5x5 step
Stone required – 9 x increment
Marble required– 16 x increment	7x7 step
Stone required – 25 x increment
Marble required – 24 x increment	8x8 step
Stone required – 36 x increment
Marble required – 28 x increment

Note the top-most layer is made entirely out of gold, with a height equal to the given increment. See the examples for complete calculations.
Input
You will receive two number parameters base and increment.
Output
Print on the console on separate lines the total required amounts of each material rounded up and the final height of the pyramid rounded down, as shown in the examples.
Constraints
·	The base will always be an integer greater than zero
·	The increment will always be a number greater than zero
·	Number.MAX_SAFE_INTEGER will never be exceeded for any of the calculations



11.	* Bitcoin "Mining"
Write a JavaScript program that calculates the total amount of bitcoins you purchased with the gold you mined during your shift at the mine. Your shift consists of a certain number of days where you mine an amount of gold in grams. Your program will receive an array with the amount of gold you mined each day, where the first day of your shift is the first index of the array. Also, someone was stealing every third day from the start of your shift 30% from the mined gold for this day. You need to check, which day you have enough money to buy your first bitcoin. For the different exchanges use these prices:
1 Bitcoin	11949.16 lv.
1 g of gold	67.51 lv.

Input
You will receive an array of numbers, representing your shift at the mine.
Output
Print on the console these lines in the following formats:
·	First-line prints the total amount of bought bitcoins:
 `Bought bitcoins: {count}`
·	Second-line prints which day you bought your first bitcoin: 
 `Day of the first purchased bitcoin: {day}`
In case you did not purchase any bitcoins, d	o not print the second line.
·	Third-line prints the amount of money that’s left after the bitcoin purchases rounded by the second digit after the decimal point:
  `Left money: {money} lv.`
Constraints
·	The input array may contain up to 1,000 elements
·	The numbers in the array are in the range [0.01..5,000.00] inclusive
·	Allowed time/memory: 100ms/16MB
